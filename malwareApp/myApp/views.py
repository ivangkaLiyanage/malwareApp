from django.shortcuts import render, redirect
from django.core.files.storage import FileSystemStorage
from django.http import HttpResponse
from django.urls import reverse
#import uplod file database
from .models import UploadedMalwareFile
#pdf
import pdfkit
from django.template.loader import get_template
#alert 
from django.contrib import messages
#ML 
import os
import joblib
import pandas as pd
import hashlib
from datetime import datetime
from django.conf import settings

#pdf download
config = pdfkit.configuration(wkhtmltopdf='/usr/local/bin/wkhtmltopdf')

def home(request):
    # Add any logic for the home page here
    return render(request, 'home.html')


def analyze(request):
    # Add any logic for the home page here
    return render(request, 'analyze.html')

#downloading result pdf
def generate_pdf(request, id):
    pdf = pdfkit.from_url(request.build_absolute_uri(reverse('template_pdf', args=[id])), False, configuration=config)
    response = HttpResponse(pdf, content_type= 'application/pdf')
    response['Content-Disposition'] = 'attachment; filename="report.pdf"'
    return response

#for upload file
def upload_file(request):
    if request.method == 'POST':
        #takes the data of the input field with the name=malware
        malware_file = request.FILES.get('malware')
        if malware_file:
            #information
            file_name = malware_file.name
            file_size = malware_file.size

            #network
            new_file = UploadedMalwareFile(
                file=malware_file, 
                file_name=file_name, 
                file_size=file_size,
                user_ip = request.META.get('REMOTE_ADDR'),
                user_agent = request.META.get('HTTP_USER_AGENT'),
                http_referer = request.META.get('HTTP_REFERER'),
                http_host = request.META.get('HTTP_HOST'),
                server_name = request.META.get('SERVER_NAME'),
                server_port = request.META.get('SERVER_PORT'),
                request_method = request.META.get('REQUEST_METHOD'),
            )
            new_file.save()
            messages.success(request, 'File is uploaded successfully')
            #machineLearning
            ml_results = machine_learning_analysis(malware_file.name)
            new_file_ml = UploadedMalwareFile.objects.get(id=new_file.id)
            new_file_ml.submission_date=ml_results["timestamp"]
            new_file_ml.md5_checksum = ml_results["md5_checksum"]
            new_file_ml.sha256_checksum = ml_results["sha256_checksum"]
            new_file_ml.malware_status = ml_results["malware_status"]
            new_file_ml.malware_score = ml_results["maliciousness_score"]
            new_file_ml.save()

            return redirect('results', id=new_file.id)
        messages.error(request, 'File is not uploaded')
    return render(request, 'analyze.html')

#machine learning
def machine_learning_analysis(file):
    # Specify the path to your trained Logistic Regression model (.pkl file)
    # model_file_path = os.path.join(settings.BASE_DIR, 'private', 'final.pkl')
    model_file_path = os.path.join(settings.MEDIA_ROOT, 'private/final.pkl')
    # Specify the path to the file you want to analyze
    file_to_analyze =  os.path.join(settings.MEDIA_ROOT, 'uploads/'+file)
    
    # Load the trained model
    if os.path.exists(model_file_path):
        loaded_model = joblib.load(model_file_path)
        print("Model loaded successfully.")
    else:
        print("Model file does not exist at:", model_file_path)
        exit()  # Exit if the model file is not found

    # Calculate MD5 and SHA256 checksums of the file
    def calculate_checksums(file_path):
        md5_hash = hashlib.md5()
        sha256_hash = hashlib.sha256()
        
        with open(file_path, "rb") as file:
            while chunk := file.read(8192):
                md5_hash.update(chunk)
                sha256_hash.update(chunk)
        
        return md5_hash.hexdigest(), sha256_hash.hexdigest()

    md5_checksum, sha256_checksum = calculate_checksums(file_to_analyze)
    print(f"MD5 Checksum: {md5_checksum}")
    print(f"SHA256 Checksum: {sha256_checksum}")

    # Add date and time to the timestamp
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"Date and Time: {timestamp}")

    # Replace this part with code to extract feature values from the file
    # Extract the actual feature values from the file
    # Example: Read bytes from the file and convert them to a numerical feature
    # You need to adapt this part to your specific file format and data
    with open(file_to_analyze, "rb") as file:
        data = file.read()
        # Extract feature values from 'data' variable
        # Example: Extract a 4-byte integer from a specific offset in the file
        feature_value = int.from_bytes(data[0:4], byteorder='little')  # Example feature extraction

    # Prepare the data for prediction
    file_data = {
        'Magic': [0.1],  # Replace with the actual value for 'Magic'
        'Subsystem': [0.2],  # Replace with the actual value for 'Subsystem'
        'DllCharacteristics': [0.3],  # Replace with the actual value for 'DllCharacteristics'
        'e_maxalloc': [0.4],
        'e_crlc': [0.5],
        'e_cparhdr': [0.6],
        'e_minalloc': [0.7],
        'e_magic': [0.1],  # Replace with the actual value for 'e_magic'
        'e_cblp': [0.2],  # Replace with the actual value for 'e_cblp'
        'e_cp': [0.3],     # Replace with the actual value for 'e_cp'
        'e_maxalloc': [0.4],
        'e_crlc': [0.5],
        'e_cparhdr': [0.6],
        'e_minalloc': [0.7],
    }

    # Create a DataFrame with the expected column names
    X_new = pd.DataFrame(file_data)

    # Make predictions
    prediction = loaded_model.predict(X_new)

    # Define a maliciousness score (you can adjust this scoring logic)
    maliciousness_score = (sum(prediction) / len(prediction)) * 100
    malware_status = False

    # Display the prediction result (malicious or not) along with MD5, SHA256, date and time, and maliciousness score
    print(f"Maliciousness Score: {maliciousness_score:.2f}%")
    if maliciousness_score > 50:  # You can adjust this threshold
        malware_status = True    
        print("Prediction: The file is classified as Malware.")
    else:
        malware_status = False
        print("Prediction: The file is classified as Not Malware.")
    
    #myCode
    machine_learning_results = {
        "md5_checksum": md5_checksum,
        "sha256_checksum": sha256_checksum,
        "timestamp": timestamp,
        "maliciousness_score": maliciousness_score,
        "malware_status":  malware_status
    }
    
    return machine_learning_results


#the logic is created over here
def results(request, id):
    malware = UploadedMalwareFile.objects.filter(id=id)
    return render(request, 'result.html', {'data': malware})

def template_pdf(request, id):
    malware = UploadedMalwareFile.objects.filter(id=id)
    return render(request, 'download-template.html', {'data': malware})