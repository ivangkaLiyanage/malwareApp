from django.shortcuts import render, redirect
from django.core.files.storage import FileSystemStorage
from django.http import HttpResponse
from django.urls import reverse
#import uplod file database
from .models import UploadedMalwareFile
#pdf
import pdfkit
from django.template.loader import get_template
#alert 
from django.contrib import messages
#ML 
import os
from datetime import datetime
from django.conf import settings
from .functions import *

#pdf download
config = pdfkit.configuration(wkhtmltopdf='/usr/local/bin/wkhtmltopdf')

def home(request):
    # Add any logic for the home page here
    return render(request, 'home.html')


def analyze(request):
    # Add any logic for the home page here
    # UploadedMalwareFile.objects.all().delete()
    return render(request, 'analyze.html')

#downloading result pdf
def generate_pdf(request, id):
    pdf = pdfkit.from_url(request.build_absolute_uri(reverse('template_pdf', args=[id])), False, configuration=config)
    response = HttpResponse(pdf, content_type= 'application/pdf')
    response['Content-Disposition'] = 'attachment; filename="report.pdf"'
    return response

#for upload file
def upload_file(request):
    if request.method == 'POST':
        
        #takes the data of the input field with the name=malware
        malware_file = request.FILES.get('malware')

        if malware_file:
            create  = UploadedMalwareFile(file=malware_file)
            create.save()

        #machineLearning
        md5_checksum,sha256_checksum = calculate_checksums(malware_file.name)
        malware_status, maliciousness_score = machine_learning_analysis(malware_file.name)

        #check for duplicate uploads
        alldata = UploadedMalwareFile.objects.all()
        checked = True

        for check in alldata:
            if check.md5_checksum == md5_checksum:
                foundid= check.id
                checked = False

        if malware_file and checked:
            new_file = UploadedMalwareFile.objects.get(id=create.id)
        
            new_file.file_name=malware_file.name
            new_file.file_size=malware_file.size
            new_file.submission_date=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            new_file.user_ip = request.META.get('REMOTE_ADDR')
            new_file.user_agent = request.META.get('HTTP_USER_AGENT')
            new_file.http_referer = request.META.get('HTTP_REFERER')
            new_file.http_host = request.META.get('HTTP_HOST')
            new_file.server_name = request.META.get('SERVER_NAME')
            new_file.server_port = request.META.get('SERVER_PORT')
            new_file.request_method = request.META.get('REQUEST_METHOD')
            new_file.md5_checksum = md5_checksum
            new_file.sha256_checksum = sha256_checksum
            new_file.malware_status = malware_status
            new_file.malware_score = maliciousness_score
            
            new_file.save()

            messages.success(request, 'File is uploaded successfully')
            
            return redirect('results', id=create.id)
        
        elif malware_file and checked == False:
            messages.success(request, 'File is uploaded successfully!')
            create.delete()
            return redirect('results', id=foundid)

        messages.error(request, 'File is not uploaded')
    return render(request, 'analyze.html')


#display
def results(request, id):
    malware = UploadedMalwareFile.objects.filter(id=id)
    return render(request, 'result.html', {'data': malware})

#show pdf template
def template_pdf(request, id):
    malware = UploadedMalwareFile.objects.filter(id=id)
    return render(request, 'download-template.html', {'data': malware})