from django.shortcuts import render, redirect
from django.core.files.storage import FileSystemStorage
from django.http import HttpResponse
from django.urls import reverse
from .fallback import *

#ML 
import os
import joblib
import pandas as pd
import hashlib
from datetime import datetime
from django.conf import settings


# Calculate MD5 and SHA256 checksums of the file
def calculate_checksums(file):

    file_path =  os.path.join(settings.MEDIA_ROOT, 'uploads/'+file)

    md5_hash = hashlib.md5()
    sha256_hash = hashlib.sha256()
    
    with open(file_path, "rb") as file:
        while chunk := file.read(8192):
            md5_hash.update(chunk)
            sha256_hash.update(chunk)  
    return md5_hash.hexdigest(), sha256_hash.hexdigest()


#machine learning
def machine_learning_analysis(file):
    # Specify the path to your trained Logistic Regression model (.pkl file)
    # model_file_path = os.path.join(settings.BASE_DIR, 'private', 'final.pkl')
    model_file_path = os.path.join(settings.ML_ROOT, 'mlmode_2023-10-20-16h-03m-22s.pkl')
    
    # Specify the path to the file you want to analyze
    file_to_analyze =  os.path.join(settings.MEDIA_ROOT, 'uploads/'+file)
    
    # Load the trained model
    if os.path.exists(model_file_path):
        loaded_model = joblib.load(model_file_path)
        print("Model loaded successfully.")
    else:
        print("Model file does not exist at:", model_file_path)
        exit()  # Exit if the model file is not found

    with open(file_to_analyze, "rb") as file:
        data = file.read()

        feature_value = int.from_bytes(data[0:4], byteorder='little')  

    # Prepare the data for prediction
    file_data = {
        'Magic': [0.1],  # Replace with the actual value for 'Magic'
        'Subsystem': [0.2],  # Replace with the actual value for 'Subsystem'
        'DllCharacteristics': [0.3],  # Replace with the actual value for 'DllCharacteristics'
        'e_maxalloc': [0.4],
        'e_crlc': [0.5],
        'e_cparhdr': [0.6],
        'e_minalloc': [0.7],
        'e_magic': [0.1],  # Replace with the actual value for 'e_magic'
        'e_cblp': [0.2],  # Replace with the actual value for 'e_cblp'
        'e_cp': [0.3],     # Replace with the actual value for 'e_cp'
        'e_maxalloc': [0.4],
        'e_crlc': [0.5],
        'e_cparhdr': [0.6],
        'e_minalloc': [0.7],
    }

    # Create a DataFrame with the expected column names
    X_new = pd.DataFrame(file_data)

    # Make predictions
    prediction = loaded_model.predict(X_new)

    # Define a maliciousness score (you can adjust this scoring logic)
    maliciousness_score = (sum(prediction) / len(prediction)) * 100
    malware_status = False

    # Display the prediction result (malicious or not) along with MD5, SHA256, date and time, and maliciousness score
    print(f"Maliciousness Score: {maliciousness_score:.2f}%")
    maliciousness_score = heuristic_maliciousness_score(file_to_analyze)
    print(f"Maliciousness After Score: {maliciousness_score:.2f}%")
    
    if maliciousness_score > 40:  # You can adjust this threshold
        malware_status = True    
        print("Prediction: The file is classified as Malware.")
    else:
        malware_status = False
        print("Prediction: The file is classified as Not Malware.")

    
    return malware_status, maliciousness_score